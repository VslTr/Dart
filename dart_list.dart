// СПИСКИ ДАННЫХ
// List, Set, Map

void main() {
  //_list_();
  //_set_();
  _map_();
}

/*------------------------ LIST (Список) LIST ---------------------------*/

void _list_() {
  // List arr; // пример создания списка
  // arr = [1, 2, 3, 'hello'];
  // List<int> num; // можно сразу указать тип данных в списке
  // num = [1, 2, 3];
  // print('$arr, $num');

  // список может содержать разные типы данных
  var list1 = [21, 5, 8, 'hello', true];

  list1.add(333); // 'add(); - значение добавится в конец списка

  // addAll() позволяет добавить множество различных значений,
  list1.addAll([20, 21, 'world']);
  //если они разного типа то тоже должны быть в виде сриска '[20, 21, 'world']'
  print(list1);

// remove() - удалит первый найденый элемент со значением '21', следующий не тронет
  list1.remove(21);
  print(list1);

// removeAt(3) - удаляет элемент по индексу (после удаления '21' 3-м будет 'true')
  list1.removeAt(3);
  print(list1);

// removeWhere((element) => false) - удаление по условию
// функция removeWhere((element) принимает значение (element) и далее проверяет его на соответсвие условию
// например (arr.removeWhere((i) => i < 0);) удалит все элементы меньше ноля
  var nums = [2018, 2017, 2019, 2020, 2021];
  nums.removeWhere((element) => element < 2020); // удаляем элементы меньше 2020
  print(nums);
// или можно удалить все элементы за исключением определенного типа
  list1.removeWhere((i) => i.runtimeType != int);
  print(list1);
//было [5, 8, hello, 333, 20, 21, world] => стало[5, 8, 333, 20, 21]

// Выводим элементы первый ('first'), последний ('last') и длинну списка ('lenght')
  print('First: ${list1.first}; Last: ${list1.last}; Lenght: ${list1.length}');
// Mожно так же использовать индексы 'list1[0]'
  print('First: ${list1[0]}; Last: ${list1[4]}; Lenght: ${list1.length}');
}

/*-------------------------SET (Сеты аналог картежам) SET-----------------------------*/

void _set_() {
// Сет это список который содержит только уникальные элементы,
// все повторяющиеся элементы автоматически удалятся после инициализации
  var s = {1, 2, 3, 1, 2, 3, 5, 6}; // Можно так же обьявлять через Set<int> m;
  print(s); // => {1, 2, 3, 5, 6}
}

/*------------------------ MAP (Словарь) MAP ----------------------------------------*/
// Класс Map представляет коллекцию элементов, где каждый элемент имеет ключ и значение.
// Ключ и значение элемента могут представлять различные типы.
// Для создания объекта Map могут использоваться фигурные скобки {}, внутри которых помещаются пары ключ-значение,
// либо конструктор класса Map. Варианты создания Map:
void _map_() {
  var map = {1: 'Tom', 2: 'Bob', 3: 'Sam'};
// или c указанием типа данных ключа и значения  <int, String> как шаблон (дженерик)
  var map1 = <int, String>{1: 'Nik', 2: 'Jany', 3: 'Linda'};
// эквивалентное определение Map
  Map<int, String> map2 = {1: 'Timi', 2: 'Dik', 3: 'Sara'};

// С помощью конструктора Map можно создать пустой объект Map и потом добавлять в него объекты:
  var map3 = Map(); // пустой Map
  map3[1] = 'Alice';
  map3[44] = 'Bobi';
  map3[6] = 'Sammy';

  print(map);
  print(map1);
  print(map2);
  print(map3);
}
